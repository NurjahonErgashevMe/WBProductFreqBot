from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import re
from src.config.settings import settings

class BotHandlers:
    def __init__(self, dp: Dispatcher, bot, parser, log_service):
        self.dp = dp
        self.bot = bot
        self.parser = parser
        self.log_service = log_service
        self.waiting_for_url = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.register_message_handler(self.start, commands=["start"], user_id=settings.ADMIN_IDS)
        self.dp.register_message_handler(self.list_admins, commands=["list"], user_id=settings.ADMIN_IDS)
        self.dp.register_message_handler(self.manual_parse, commands=["parse"], user_id=settings.ADMIN_IDS)
        self.dp.register_message_handler(self.handle_text, user_id=settings.ADMIN_IDS)
        self.dp.register_message_handler(self.unauthorized_access)

    def get_main_menu(self, user_id: int) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add(KeyboardButton("–ü–∞—Ä—Å–∏—Ç—å"))
        if user_id in settings.ADMIN_IDS:
            keyboard.add(KeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"))
        return keyboard

    def get_url_input_menu(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ URL"""
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        keyboard.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        return keyboard

    async def start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        welcome_text = (
            "üõçÔ∏è *Wildberries Categories Analyzer Bot*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/parse - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
        )
        await message.answer(welcome_text, parse_mode="Markdown", reply_markup=self.get_main_menu(user_id))

    async def list_admins(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"""
        admins = "\n".join([f"- {admin_id}" for admin_id in settings.ADMIN_IDS])
        await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins}", reply_markup=self.get_main_menu(message.from_user.id))

    async def manual_parse(self, message: types.Message):
        """–†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = message.from_user.id
        self.waiting_for_url[user_id] = 'manual'
        await message.answer(
            "üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "https://www.wildberries.ru/catalog/<category>/<subcategory>/<subsubcategory>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/dom-i-dacha/vannaya/aksessuary",
            parse_mode="Markdown",
            reply_markup=self.get_url_input_menu()
        )

    async def handle_text(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = message.from_user.id
        text = message.text.strip()

        if text == "–ü–∞—Ä—Å–∏—Ç—å":
            await self.manual_parse(message)
            return
        elif text == "–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤":
            await self.list_admins(message)
            return
        elif text == "–û—Ç–º–µ–Ω–∞" and user_id in self.waiting_for_url:
            del self.waiting_for_url[user_id]
            await message.answer(
                "‚ùå –í–≤–æ–¥ URL –æ—Ç–º–µ–Ω—ë–Ω.",
                parse_mode="Markdown",
                reply_markup=self.get_main_menu(user_id)
            )
            return

        if user_id in self.waiting_for_url:
            url = text
            url_pattern = r'^https://www\.wildberries\.ru/catalog/[\w-]+/[\w-]+/[\w-]+$'
            if not re.match(url_pattern, url):
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "https://www.wildberries.ru/catalog/<category>/<subcategory>/<subsubcategory>\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/dom-i-dacha/vannaya/aksessuary\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
                    parse_mode="Markdown",
                    reply_markup=self.get_url_input_menu()
                )
                return

            await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...", reply_markup=self.get_url_input_menu())
            success = await self.parser.parse_category(url, user_id)
            await self.log_service.clear_log_messages(user_id)
            if success:
                del self.waiting_for_url[user_id]
                await message.answer(
                    "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                    parse_mode="Markdown",
                    reply_markup=self.get_main_menu(user_id)
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "https://www.wildberries.ru/catalog/<category>/<subcategory>/<subsubcategory>\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/dom-i-dacha/vannaya/aksessuary\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
                    parse_mode="Markdown",
                    reply_markup=self.get_url_input_menu()
                )

    async def unauthorized_access(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = message.from_user.id
        await self.log_service.log_to_file(f"Unauthorized access attempt from user {user_id}", "warning")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", parse_mode="Markdown")