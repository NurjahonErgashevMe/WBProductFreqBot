import asyncio
import logging
import os
import sys
import re
from typing import List, Union
import time
import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv
import requests

from wildberries import WildberriesEvirmaParser

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    import locale
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("wb_parser.log", encoding='utf-8'), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

class BotConfig:
    def __init__(self):
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.admin_ids = [int(id_) for id_ in os.getenv("ADMIN_ID").split(",")]  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤

class WBCategoriesBot:
    def __init__(self):
        self.config = BotConfig()
        self.bot = Bot(token=self.config.token)
        self.dp = Dispatcher(self.bot)
        self.parser = WildberriesEvirmaParser()
        self.waiting_for_url = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ URL
        self.log_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –∏ —Ç–µ–∫—Å—Ç–∞ –ª–æ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        self.dp.register_message_handler(self.start, commands=["start"], user_id=self.config.admin_ids)
        self.dp.register_message_handler(self.list_admins, commands=["list"], user_id=self.config.admin_ids)
        self.dp.register_message_handler(self.manual_parse, commands=["parse"], user_id=self.config.admin_ids)
        self.dp.register_message_handler(self.handle_text, user_id=self.config.admin_ids)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–æ–≤
        self.dp.register_message_handler(self.unauthorized_access)

    async def unauthorized_access(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = message.from_user.id
        logger.warning(f"Unauthorized access attempt from user {user_id}")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", parse_mode="Markdown")

    def get_main_menu(self, user_id: int) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add(KeyboardButton("–ü–∞—Ä—Å–∏—Ç—å"))
        if user_id in self.config.admin_ids:
            keyboard.add(KeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"))
        return keyboard

    def get_url_input_menu(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ URL —Å –∫–Ω–æ–ø–∫–æ–π –û—Ç–º–µ–Ω–∞"""
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        keyboard.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        return keyboard

    async def start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        welcome_text = (
            "üõçÔ∏è *Wildberries Categories Analyzer Bot*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/parse - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
        )
        await message.answer(welcome_text, parse_mode="Markdown", reply_markup=self.get_main_menu(user_id))

    async def list_admins(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        admins = "\n".join([f"- {admin_id}" for admin_id in self.config.admin_ids])
        await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins}", reply_markup=self.get_main_menu(message.from_user.id))

    async def manual_parse(self, message: types.Message):
        """–†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = message.from_user.id
        self.waiting_for_url[user_id] = 'manual'
        await message.answer(
            "üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "https://www.wildberries.ru/catalog/<category>/<subcategory>/<subsubcategory>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/dom-i-dacha/vannaya/aksessuary",
            parse_mode="Markdown",
            reply_markup=self.get_url_input_menu()
        )

    async def handle_text(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = message.from_user.id
        text = message.text.strip()

        if text == "–ü–∞—Ä—Å–∏—Ç—å":
            await self.manual_parse(message)
            return
        elif text == "–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤":
            await self.list_admins(message)
            return
        elif text == "–û—Ç–º–µ–Ω–∞" and user_id in self.waiting_for_url:
            del self.waiting_for_url[user_id]
            await message.answer(
                "‚ùå –í–≤–æ–¥ URL –æ—Ç–º–µ–Ω—ë–Ω.",
                parse_mode="Markdown",
                reply_markup=self.get_main_menu(user_id)
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL
        if user_id in self.waiting_for_url:
            url = text

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
            url_pattern = r'^https://www\.wildberries\.ru/catalog/[\w-]+/[\w-]+/[\w-]+$'
            if not re.match(url_pattern, url):
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "https://www.wildberries.ru/catalog/<category>/<subcategory>/<subsubcategory>\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/dom-i-dacha/vannaya/aksessuary\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
                    parse_mode="Markdown",
                    reply_markup=self.get_url_input_menu()
                )
                return

            await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...", reply_markup=self.get_url_input_menu())
            success = await self.generate_and_send_report(user_id=user_id, category_url=url)
            if success:
                # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ URL
                del self.waiting_for_url[user_id]
                await message.answer(
                    "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                    parse_mode="Markdown",
                    reply_markup=self.get_main_menu(user_id)
                )
            else:
                # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞—Ç—å URL
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "https://www.wildberries.ru/catalog/<category>/<subcategory>/<subsubcategory>\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/dom-i-dacha/vannaya/aksessuary\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
                    parse_mode="Markdown",
                    reply_markup=self.get_url_input_menu()
                )

    async def send_status(self, text: str, user_id: int, markdown: bool = False):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param markdown: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Markdown
        """
        logger.info(f"Sending status to user {user_id}: {text}")
        try:
            if markdown or ("*" in text or "_" in text):
                await self.bot.send_message(user_id, text, parse_mode="Markdown")
            else:
                await self.bot.send_message(user_id, text)
        except Exception as e:
            logger.error(f"Failed to send status to user {user_id}: {e}")

    async def update_log_message(self, user_id: int, log_message: str):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param log_message: –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        if user_id not in self.log_messages:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.bot.send_message(user_id, f"üìÑ *–õ–æ–≥–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:*\n{log_message}", parse_mode="Markdown")
            self.log_messages[user_id] = {'message_id': message.message_id, 'text': [log_message]}
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_logs = self.log_messages[user_id]['text']
            current_logs.append(log_message)
            new_text = "üìÑ *–õ–æ–≥–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:*\n" + "\n".join(current_logs)
            try:
                await self.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=self.log_messages[user_id]['message_id'],
                    text=new_text,
                    parse_mode="Markdown"
                )
                self.log_messages[user_id]['text'] = current_logs
            except Exception as e:
                logger.error(f"Failed to update log message for user {user_id}: {e}")

    async def clear_log_messages(self, user_id: int):
        """
        –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.log_messages:
            del self.log_messages[user_id]

    async def generate_and_send_report(self, user_id: int, category_url: str) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç—á–µ—Ç
        :param category_url: URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        :return: True, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, False, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        logger.info(f"Generating report for user {user_id}, category: {category_url}")
        
        try:
            # –°—Ç–∞—Ç—É—Å: –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
            await self.send_status("üü¢ *–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*", user_id=user_id, markdown=True)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            self.parser.results = []
            
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ª–æ–≥–æ–≤
            start_time = time.time()
            try:
                category = self.parser.find_category_by_url(category_url)
                if not category:
                    return False
                
                for page in range(1, self.parser.MAX_PAGES + 1):
                    wb_data, log_message = self.parser.scrape_wb_page(page=page, category=category)
                    await self.update_log_message(user_id, log_message)
                    
                    products = self.parser.process_products(wb_data)
                    if not products:
                        await self.send_status(
                            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.",
                            user_id=user_id,
                            markdown=True
                        )
                        if self.parser.results:
                            filename = f"{category['name']}_analysis_{int(time.time())}"
                            self.parser.save_to_excel(filename)
                            await self.send_excel_to_user(filename, user_id)
                        break
                    
                    evirma_response = self.parser.query_evirma_api(products)
                    if evirma_response is None:
                        if self.parser.results:
                            filename = f"{category['name']}_analysis_{int(time.time())}"
                            self.parser.save_to_excel(filename)
                            await self.send_excel_to_user(filename, user_id)
                        else:
                            await self.send_status(
                                "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
                                user_id=user_id,
                                markdown=True
                            )
                        break
                    
                    page_results = self.parser.parse_evirma_response(evirma_response)
                    self.parser.results.extend(page_results)
                    
                    await asyncio.sleep(1)
                
                if self.parser.results:
                    filename = f"{category['name']}_analysis_{int(time.time())}"
                    self.parser.save_to_excel(filename)
                    await self.send_status(
                        f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω: —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.parser.results)} —Ç–æ–≤–∞—Ä–æ–≤",
                        user_id=user_id,
                        markdown=True
                    )
                    await self.send_excel_to_user(filename, user_id)
                else:
                    await self.send_status(
                        "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
                        user_id=user_id,
                        markdown=True
                    )
                
                return True
                
            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 429:
                    await self.send_status(
                        "‚ÑπÔ∏è –ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤ —Å–ø–∞—Ä—Å–µ–Ω—ã.",
                        user_id=user_id,
                        markdown=True
                    )
                    if self.parser.results:
                        filename = f"{category['name']}_analysis_{int(time.time())}"
                        self.parser.save_to_excel(filename)
                        await self.send_status(
                            f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω: –º–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤ —Å–ø–∞—Ä—Å–µ–Ω—ã. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.parser.results)} —Ç–æ–≤–∞—Ä–æ–≤",
                            user_id=user_id,
                            markdown=True
                        )
                        await self.send_excel_to_user(filename, user_id)
                    return True
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"
                    await self.send_status(error_msg, user_id=user_id, markdown=True)
                    if self.parser.results:
                        filename = f"{category['name']}_analysis_{int(time.time())}"
                        self.parser.save_to_excel(filename)
                        await self.send_status(
                            f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.parser.results)} —Ç–æ–≤–∞—Ä–æ–≤",
                            user_id=user_id,
                            markdown=True
                        )
                        await self.send_excel_to_user(filename, user_id)
                    return True
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"
                await self.send_status(error_msg, user_id=user_id, markdown=True)
                if self.parser.results:
                    filename = f"{category['name']}_analysis_{int(time.time())}"
                    self.parser.save_to_excel(filename)
                    await self.send_status(
                        f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.parser.results)} —Ç–æ–≤–∞—Ä–æ–≤",
                        user_id=user_id,
                        markdown=True
                    )
                    await self.send_excel_to_user(filename, user_id)
                return True
            finally:
                elapsed_time = time.time() - start_time
                await self.send_status(
                    f"–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥",
                    user_id=user_id,
                    markdown=True
                )

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:*\n`{str(e)}`"
            await self.send_status(error_msg, user_id=user_id, markdown=True)
            logger.exception("Error generating report")
            return False
        finally:
            await self.clear_log_messages(user_id)

    async def delete_file_after_delay(self, file_path: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥"""
        await asyncio.sleep(15)
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.info(f"File deleted: {file_path}")
            else:
                logger.warning(f"File not found for deletion: {file_path}")
        except Exception as e:
            logger.error(f"Failed to delete file {file_path}: {e}")

    async def send_excel_to_user(self, filename: str, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ Excel-—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
        
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±–µ–∑ .xlsx)
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ /output
        file_path = os.path.join('output', f'{filename}.xlsx')
        
        if not os.path.exists(file_path):
            error_msg = f"‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            await self.send_status(error_msg, user_id=user_id, markdown=True)
            logger.error(error_msg)
            return

        today = datetime.datetime.now().strftime("%d.%m.%Y")
        caption = f"üìä *–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries* ({today})"

        try:
            with open(file_path, "rb") as file:
                await self.bot.send_document(
                    user_id,
                    types.InputFile(file, f'{filename}.xlsx'),
                    caption=caption,
                    parse_mode="Markdown"
                )
            logger.info(f"Excel report sent to user {user_id}: {file_path}")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(self.delete_file_after_delay(file_path))
        except Exception as e:
            logger.error(f"Failed to send Excel to user {user_id}: {e}")

    async def on_startup(self, _):
        logger.info("Bot starting up...")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        for admin_id in self.config.admin_ids:
            try:
                await self.bot.send_message(
                    admin_id,
                    "ü§ñ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!*\n"
                    f"–í–∞—à ID: {admin_id}\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")

    async def on_shutdown(self, _):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        logger.info("Bot shutting down...")
        await self.bot.close()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        executor.start_polling(
            self.dp,
            skip_updates=True,
            on_startup=self.on_startup,
            on_shutdown=self.on_shutdown
        )

if __name__ == "__main__":
    bot = WBCategoriesBot()
    bot.run()