import asyncio
import datetime
import logging
import os
import sys
from typing import List, Optional, Set, Union

import aiohttp
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

from wb_categories_parser import WBCategoriesParser
from pytz import timezone
from apscheduler.triggers.cron import CronTrigger

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    import locale
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("wb_parser.log", encoding='utf-8'), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

class BotConfig:
    def __init__(self):
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.admin_ids = [int(id_) for id_ in os.getenv("ADMIN_ID").split(",")]  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤

class WBCategoriesBot:
    def __init__(self):
        self.config = BotConfig()
        self.bot = Bot(token=self.config.token)
        self.dp = Dispatcher(self.bot)
        self.scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
        self.scheduler.add_jobstore('memory')  # –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞–Ω–∏–π
        self.parser = WBCategoriesParser()
        self.current_users = set(self.config.admin_ids)  # –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        self.dp.register_message_handler(self.start, commands=["start"], user_id=self.config.admin_ids)
        self.dp.register_message_handler(self.subscribe, commands=["subscribe"], user_id=self.config.admin_ids)
        self.dp.register_message_handler(self.unsubscribe, commands=["unsubscribe"], user_id=self.config.admin_ids)
        self.dp.register_message_handler(self.manual_update, commands=["update"], user_id=self.config.admin_ids)
        self.dp.register_message_handler(self.list_subscribers, commands=["list"], user_id=self.config.admin_ids)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–æ–≤
        self.dp.register_message_handler(self.unauthorized_access)

    async def unauthorized_access(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = message.from_user.id
        logger.warning(f"Unauthorized access attempt from user {user_id}")
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    async def start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üõçÔ∏è *Wildberries Categories Analyzer Bot*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries "
            "–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n"
            "/update - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é\n\n"
            "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ 09:00 –∏ 15:00 –ø–æ –ú–æ—Å–∫–≤–µ."
        )
        await message.answer(welcome_text, parse_mode="Markdown")

    async def subscribe(self, message: types.Message):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        user_id = message.from_user.id
        if user_id in self.current_users:
            await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        self.current_users.add(user_id)
        logger.info(f"User {user_id} subscribed to updates")
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –æ—Ç—á–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )

    async def unsubscribe(self, message: types.Message):
        """–û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        user_id = message.from_user.id
        if user_id not in self.current_users:
            await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        self.current_users.remove(user_id)
        logger.info(f"User {user_id} unsubscribed from updates")
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")

    async def list_subscribers(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        subscribers = "\n".join([f"- {user_id}" for user_id in self.current_users])
        await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n{subscribers}")

    async def manual_update(self, message: types.Message):
        """–†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        user_id = message.from_user.id
        await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é...")
        await self.generate_and_send_report(single_user_id=user_id)

    async def send_status(self, text: str, markdown: bool = False, user_ids: Union[List[int], Set[int], None] = None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param markdown: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Markdown
        :param user_ids: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ None, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º)
        """
        if user_ids is None:
            user_ids = self.current_users
        
        if not user_ids:
            logger.warning("No users to send status to.")
            return

        logger.info(f"Sending status to {len(user_ids)} users: {text}")
        for user_id in user_ids:
            try:
                if markdown or ("*" in text or "_" in text):
                    await self.bot.send_message(user_id, text, parse_mode="Markdown")
                else:
                    await self.bot.send_message(user_id, text)
            except Exception as e:
                logger.error(f"Failed to send status to user {user_id}: {e}")

    async def generate_and_send_report(self, single_user_id=None):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
        
        :param single_user_id: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
                              –ï—Å–ª–∏ None –∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∏, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
        """
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–º—É
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Ç–µ–∫—É—â–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        recipients = [single_user_id] if single_user_id else self.current_users
        logger.info(f"Generating report for users: {recipients}")
        
        try:
            # –°—Ç–∞—Ç—É—Å: –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
            await self.send_status("üü¢ *–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É*", markdown=True, user_ids=recipients)

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await self.send_status("üìã *–ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å Wildberries...*", markdown=True, user_ids=recipients)
            categories = self.parser.get_wb_categories()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é
            await self.send_status("üß© *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π...*", markdown=True, user_ids=recipients)
            category_hierarchy = self.parser.extract_category_hierarchy(categories)
            
            # –ü–æ–ª—É—á–∞–µ–º SEO –∫–ª—é—á–∏
            seo_keywords = [cat["SEO"] for cat in category_hierarchy if cat["SEO"]]
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Evirma API
            await self.send_status("üì° *–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Evirma API...*", markdown=True, user_ids=recipients)
            evirma_data = self.parser.get_evirma_data(seo_keywords)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await self.send_status("üîó *–û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...*", markdown=True, user_ids=recipients)
            merged_data = self.parser.merge_data(category_hierarchy, evirma_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            today = datetime.datetime.now().strftime("%Y-%m-%d")
            filename = f"wb_categories_{today}.xlsx"
            await self.send_status("üíæ *–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ Excel...*", markdown=True, user_ids=recipients)
            self.parser.save_to_excel(merged_data, filename)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            await self.send_status("‚úÖ *–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!*", markdown=True, user_ids=recipients)
            await self.send_excel_to_users(filename, user_ids=recipients)
            
        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:*\n`{str(e)}`"
            await self.send_status(error_msg, markdown=True, user_ids=recipients)
            logger.exception("Error generating report")

    async def send_excel_to_users(self, filename: str, user_ids: Union[List[int], Set[int], None] = None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ Excel-—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        :param user_ids: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ None, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º)
        """
        if user_ids is None:
            user_ids = self.current_users
            
        if not user_ids:
            logger.warning("No users to send Excel to.")
            return

        if not os.path.exists(filename):
            error_msg = f"‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            await self.send_status(error_msg, markdown=True, user_ids=user_ids)
            logger.error(error_msg)
            return

        today = datetime.datetime.now().strftime("%d.%m.%Y")
        caption = f"üìä *–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π Wildberries* ({today})"

        for user_id in user_ids:
            try:
                with open(filename, "rb") as file:
                    await self.bot.send_document(
                        user_id,
                        types.InputFile(file, filename),
                        caption=caption,
                        parse_mode="Markdown"
                    )
                logger.info(f"Excel report sent to user {user_id}")
            except Exception as e:
                logger.error(f"Failed to send Excel to user {user_id}: {e}")


    def schedule_jobs(self):
        try:
            self.scheduler.add_job(
                self.generate_and_send_report,
                trigger='cron',
                hour=9,
                minute=0,
                args=[None],
                id="daily_morning_report",
                replace_existing=True
            )
            self.scheduler.add_job(
                self.generate_and_send_report,
                trigger='cron',
                hour=15,
                minute=0,
                args=[None],
                id="daily_afternoon_report",
                replace_existing=True
            )
            logger.info("Scheduled daily jobs at 09:00 and 15:00 Europe/Moscow")
        except Exception as e:
            logger.error(f"Failed to schedule job: {e}")


    async def on_startup(self, _):
        logger.info("Bot starting up...")
        self.schedule_jobs()
        logger.info("Jobs scheduled")
        self.scheduler.start()
        logger.info("Scheduler started")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        for job in self.scheduler.get_jobs():
            logger.info(f"Scheduled job: {job}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        for admin_id in self.config.admin_ids:
            try:
                await self.bot.send_message(
                    admin_id,
                    "ü§ñ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!*\n"
                    f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:00 –∏ 15:00 –ø–æ –ú–æ—Å–∫–≤–µ.\n"
                    f"–í–∞—à ID: {admin_id}\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")


    async def on_shutdown(self, _):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        logger.info("Bot shutting down...")
        self.scheduler.shutdown()
        await self.bot.close()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        executor.start_polling(
            self.dp,
            skip_updates=True,
            on_startup=self.on_startup,
            on_shutdown=self.on_shutdown
        )

if __name__ == "__main__":
    bot = WBCategoriesBot()
    bot.run()